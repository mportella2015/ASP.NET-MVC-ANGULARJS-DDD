//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Agnus.Domain.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    [Table("OrcamentoTotal")]
    public partial class OrcamentoTotal : KeyAuditableEntity
    {
        public OrcamentoTotal()
        {
            this.OrcamentoPeriodo = new HashSet<OrcamentoPeriodo>();
        }

        public string NomeFase { get; set; }
        public string NomeEtapa { get; set; }
        public string CodGrupo { get; set; }
        public string NomeGrupo { get; set; }
        public string CodItem { get; set; }
        public string NomeItem { get; set; }
        public string NomeDetalhe { get; set; }
        public decimal ValorTotal { get; set; }
        public string TxtFormulaCalculo { get; set; }
        public string TxtObservacao { get; set; }

        [ForeignKey("GrupoAprovacao")]
        public long? IdGrupoAprovacao { get; set; }
        public virtual GrupoAprovacao GrupoAprovacao { get; set; }

        [ForeignKey("ItemPlanoContas")]
        public long? IdItemPlanoContas { get; set; }
        public virtual ItemPlanoContas ItemPlanoContas { get; set; }

        [ForeignKey("ProjetoOrcamento")]
        public long IdProjetoOrcamento { get; set; }
        public virtual ProjetoOrcamento ProjetoOrcamento { get; set; }

        public string IdsNosArvore { get; set; }

        public virtual ICollection<OrcamentoPeriodo> OrcamentoPeriodo { get; set; }

        [NotMapped]
        public ItemOrcamento ItemOrcamentoCorrespondente
        {
            get
            {
                return this.ProjetoOrcamento.ItemOrcamento.FirstOrDefault(
                    x =>
                        x.NomeFase == this.NomeFase &&
                        x.NomeEtapa == this.NomeEtapa &&
                        x.NomeGrupo == this.NomeGrupo &&
                        x.NomeItem == this.NomeItem);
            }
        }

        [NotMapped]
        public bool DirecionarFormulaPai { get; set; }
        [NotMapped]
        public bool IsNew { get; set; }
        [NotMapped]
        public long IdVirtualSubstituicao { get; set; }

        public void AlterarValorTotal(decimal valor)
        {
            if (this.OrcamentoPeriodo.Any() && this.ValorTotal != default(decimal) && this.ValorTotal != valor)
            {                
                var diferenca = Math.Abs(valor - this.ValorTotal);
                var percentualAlteracao = (diferenca / this.ValorTotal);
                var percentualAplicar = valor < this.ValorTotal ? (1 - percentualAlteracao) : (1 + percentualAlteracao);
                foreach (var op in this.OrcamentoPeriodo)
                    op.ValorItem = Math.Abs(op.ValorItem * percentualAplicar);                
            }
            this.ValorTotal = valor;
        }

        public OrcamentoTotal GetSimilar()
        {
            return this.ProjetoOrcamento.OrcamentoTotal.FirstOrDefault(x => x.Id != this.Id && x.NomeFase == this.NomeFase && x.NomeEtapa == this.NomeEtapa && x.NomeGrupo == this.NomeGrupo && x.NomeItem == this.NomeItem && x.NomeDetalhe == this.NomeDetalhe);
        }        
    }
}
