//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Agnus.Domain.Models
{
    using Agnus.Domain.Models.Enum;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    [Table("ProjetoOrcamento")]
    public partial class ProjetoOrcamento : KeyAuditableEntity
    {
        public ProjetoOrcamento()
        {
            this.GrupoAprovacao = new HashSet<GrupoAprovacao>();
            this.ItemOrcamento = new HashSet<ItemOrcamento>();
            this.OrcamentoAtual = new HashSet<OrcamentoAtual>();
            this.OrcamentoTotal = new HashSet<OrcamentoTotal>();
            this.Midias = new HashSet<ConteudoTabelaDominio>();
            this.Territorios = new HashSet<ConteudoTabelaDominio>();
            this.Fases = new HashSet<ProjetoOrcamentoFase>();
            this.OrcamentosFilhos = new HashSet<ProjetoOrcamento>();
            this.OrcamentosBase = new HashSet<ProjetoOrcamento>();
            this.Duracoes = new HashSet<OrcamentoDuracao>();
        }

        public DateTime DataInicioOrcamento { get; set; }
        public DateTime DataFimOrcamento { get; set; }
        public DateTime DataStatusOrcamento { get; set; }
        public DateTime? DataAprovacao { get; set; }
        public decimal? ValorTotalOrcamento { get; set; }
        public string Escopo { get; set; }
        public decimal? ValorTaxaEmpresa { get; set; }
        public decimal? ValorWeatherDay { get; set; }
        public string TxtObservacao { get; set; }
        public int QtdUnidadePrazoVeiculacao { get; set; }

        public long? IdTemplateOrcamento { get; set; }
        public virtual Template TemplateOrcamento { get; set; }

        [ForeignKey("StatusOrcamento")]
        public long IdStatusOrcamento { get; set; }
        public virtual ConteudoTabelaDominio StatusOrcamento { get; set; }

        [ForeignKey("TipoVersaoOrcamento")]
        public long IdTipoVersaoOrcamento { get; set; }
        public virtual ConteudoTabelaDominio TipoVersaoOrcamento { get; set; }

        [ForeignKey("Projeto")]
        public long IdProjeto { get; set; }
        public virtual Projeto Projeto { get; set; }

        public virtual ICollection<GrupoAprovacao> GrupoAprovacao { get; set; }
        public virtual ICollection<ItemOrcamento> ItemOrcamento { get; set; }
        public virtual ICollection<OrcamentoAtual> OrcamentoAtual { get; set; }
        public virtual ICollection<OrcamentoTotal> OrcamentoTotal { get; set; }

        public virtual ICollection<ConteudoTabelaDominio> Midias { get; set; }
        public virtual ICollection<ConteudoTabelaDominio> Territorios { get; set; }
        public virtual ICollection<ProjetoOrcamentoFase> Fases { get; set; }

        public virtual ICollection<ProjetoOrcamento> OrcamentosBase { get; set; }
        public virtual ICollection<ProjetoOrcamento> OrcamentosFilhos { get; set; }

        public int? QtdEpisodios { get; set; }
        public decimal? ValorTaxaAdministracao { get; set; }
        public decimal? ValorTaxaWeatherDay { get; set; }

        public long? CodUnidadePrazoVeiculacao { get; set; }
        public virtual ConteudoTabelaDominio UnidadePrazoVeiculacao { get; set; }

        public long? CodFormato { get; set; }
        public virtual ConteudoTabelaDominio Formato { get; set; }

        public virtual ICollection<OrcamentoDuracao> Duracoes { get; set; }

        [NotMapped]
        public decimal OrcamentoAtualTipoManutencao
        {
            get { return this.OrcamentoAtual.Where(x => x.NumAno != null && x.NumMes != null).Sum(x => x.ValorItemReal); }
        }

        public ItemOrcamento BuscarItemOrcamentoPorOrcamentoTotal(OrcamentoTotal orcamentoTotal)
        {
            return this.ItemOrcamento
                .FirstOrDefault(x =>
                    x.NomeFase == orcamentoTotal.NomeFase &&
                    x.NomeEtapa == orcamentoTotal.NomeEtapa &&
                    x.NomeGrupo == orcamentoTotal.NomeGrupo &&
                    x.NomeItem == orcamentoTotal.NomeItem);
        }

        public IEnumerable<OrcamentoTotal> _OrcamentoTotalSemAlteracao
        {
            get
            {
                return this.OrcamentoTotal.Where(z =>
                    z.IdGrupoAprovacao != null &&
                    (
                    (z.GrupoAprovacao.TipoOrcamento.Codigo == (int)TipoOrcamentoEnum.Original) || (z.GrupoAprovacao.StatusOrcamento.Codigo == (int)StatusOrcamentoEnum.Aprovado)
                    ));
            }
        }

        public IEnumerable<OrcamentoTotal> _OrcamentoTotalComAlteracao
        {
            get
            {

                return
                    this.OrcamentoTotal.Where(z => z.IdGrupoAprovacao == null ||
                        (z.GrupoAprovacao.TipoOrcamento.Codigo == (int)TipoOrcamentoEnum.Manutencao &&
                        z.GrupoAprovacao.StatusOrcamento.Codigo == (int)StatusOrcamentoEnum.EmAprovacao));
            }
        }

        public IEnumerable<OrcamentoTotal> _OrcamentoTotalAlteracoesSumarizadas
        {
            get
            {
                var itensManutencao = this.OrcamentoTotal
                    .Where(x =>
                        x.IdGrupoAprovacao != null &&
                        x.GrupoAprovacao.TipoOrcamento.Codigo == (int)TipoOrcamentoEnum.Manutencao);
                foreach (var item in itensManutencao.Where(x => x.GrupoAprovacao.StatusOrcamento.Codigo == (int)StatusOrcamentoEnum.Aprovado))
                {
                    var itemOriginal = item.GetSimilar();
                    foreach (var itemOp in item.OrcamentoPeriodo)
                        itemOriginal.OrcamentoPeriodo.FirstOrDefault(x => x.NumAno == itemOp.NumAno && x.NumMes == itemOp.NumMes).ValorItem += itemOp.ValorItem;
                    itemOriginal.ValorTotal += item.ValorTotal;
                }
                return this.OrcamentoTotal.Except(itensManutencao);
            }
        }

        [NotMapped]
        public bool _PossuiAprovacaoPendente { get { return this.GrupoAprovacao.Any(z => z.StatusOrcamento.Codigo == (int)StatusOrcamentoEnum.EmAprovacao); } }
    }
}
